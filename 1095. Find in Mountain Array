class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak=findPeakElement(mountainArr);
        boolean isasc=true;
        int result= agnostic(mountainArr, target, 0, peak, isasc);
        if(result==-1){
            isasc=false;
            result= agnostic(mountainArr, target,peak+1, mountainArr.length()-1, isasc);
        }
        return result;
    }
    public int findPeakElement(MountainArray mountainArr) {
        int c=-1;
        int start=0;
        int end=mountainArr.length()-1;
        while(start!=end){
            int mid=(start+end)/2;
            if(mountainArr.get(mid)>mountainArr.get(mid+1)){
                end=mid;
            }
            else{
                start=mid+1;
            }
        }
        return start;
    }
    public int agnostic(MountainArray mountainArr,int target,int start,int end, boolean isasc){
			while(start<=end) {
				int mid=start+((end-start)/2);//if start +end exceeds the range of integer
				if(mountainArr.get(mid)==target) {
					return mid;}
				if(isasc) {
				if(target<mountainArr.get(mid)) {
					end=mid-1;
				}
				else {
					start=mid+1;
				}}
				else
				{if(target>mountainArr.get(mid)) {
					end=mid-1;
				}
				else {
					start=mid+1;
				}
				
			}
			
		}
			return -1;}
	}
